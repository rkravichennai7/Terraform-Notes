# Local Values Block

locals {
  # Use-case-1: Shorten the names for more readability
  #rg_name = "${var.business_unit}-${var.environment}-${var.resoure_group_name}"
  #vnet_name = "${var.business_unit}-${var.environment}-${var.virtual_network_name}"
  #snet_name = "${var.business_unit}-${var.environment}-${var.subnet_name}"
  #pip_name = "${var.business_unit}-${var.environment}-${var.publicip_name}"
  #nic_name = "${var.business_unit}-${var.environment}-${var.network_interface_name}"
  #vm_name = "${var.business_unit}-${var.environment}-${var.virtual_machine_name}"
  
  rg_name = "${var.business_unit}-${terraform.workspace}-${var.resoure_group_name}"
  vnet_name = "${var.business_unit}-${terraform.workspace}-${var.virtual_network_name}"
  snet_name = "${var.business_unit}-${terraform.workspace}-${var.subnet_name}"
  pip_name = "${var.business_unit}-${terraform.workspace}-${var.publicip_name}"
  nic_name = "${var.business_unit}-${terraform.workspace}-${var.network_interface_name}"
  vm_name = "${var.business_unit}-${terraform.workspace}-${var.virtual_machine_name}"
  

  # Use-case-2: Common tags to be assigned to all resources
  service_name = "Demo Services"
  owner = "Kalyan Reddy Daida"
  common_tags = {
    Service = local.service_name
    Owner   = local.owner
    #Tag = "demo-tag1"
  }
}

-------------------------------------------------------------------------------------------------------------------------------------------

# Explanation: - 

This Terraform code block defines local values using the locals construct.

Local values help simplify complex expressions, avoid repetition, and make your configuration more readable and maintainable.

This starts the local values block, which contains two main use cases:

## Use-case 1: Shortening Resource Names for Readability

Here, several resource names are being dynamically generated by combining multiple values (typically for consistent naming conventions across environments).

rg_name   = "${var.business_unit}-${terraform.workspace}-${var.resoure_group_name}"
vnet_name = "${var.business_unit}-${terraform.workspace}-${var.virtual_network_name}"
snet_name = "${var.business_unit}-${terraform.workspace}-${var.subnet_name}"
pip_name  = "${var.business_unit}-${terraform.workspace}-${var.publicip_name}"
nic_name  = "${var.business_unit}-${terraform.workspace}-${var.network_interface_name}"
vm_name   = "${var.business_unit}-${terraform.workspace}-${var.virtual_machine_name}"

### What each part does:

* var.business_unit: e.g., "marketing" or "finance".
* terraform. workspace: Dynamic value representing the current **Terraform workspace (e.g., dev, qa, prod). Helps in managing environment-specific resources.
* var.resource_group_name, etc: Specific names for each type of resource (e.g., "rg", "vnet", etc.).

Example output: If:

* business_unit = "sales"
* terraform.workspace = "dev"
* resoure_group_name = "rg"

Then: rg_name = "sales-dev-rg"

This creates consistent, readable, and environment-scoped resource names across your codebase.

## Use-case 2: Common Tags for All Resources

Tags are often required for cost management, governance, and ownership tracking. This use case defines tags once, then reuses them across resources.

service_name = "Demo Services"
owner = "Ankit Ranjan"
common_tags = 
{
  Service = local.service_name
  Owner   = local.owner
}

* common_tags is a map.
* It can be used in any resource block, like:

tags = local.common_tags

This helps ensure consistency and DRY principles (Don't Repeat Yourself).

### Commented Code:

#rg_name = "${var.business_unit}-${var.environment}-${var.resoure_group_name}"

The older version used a variable called var.environment. Now it's replaced with terraformâ€”workspace, which is more flexible for multi-environment deployments.

### Benefits of Using locals:

|   Feature         |               Benefit                                |
| ------------------| ---------------------------------------------------- |
|  Centralization   |  Update names or tags in one place.                  |
|  Consistency      |  Uniform naming and tagging across resources.        |
|  Reusability      |  Used in multiple resources without repeating logic. |
|  Maintainability  |  Easier to modify and understand code.               |

### Real-World Use Case Example

Imagine provisioning a VM with:

resource "azurerm_virtual_machine" "main" 
{
  name                = local.vm_name
  resource_group_name = local.rg_name
  tags                = local.common_tags
  
}
