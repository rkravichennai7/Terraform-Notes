#cloud-config
package_upgrade: false
packages:
  - httpd
write_files:
  - owner: root:root 
    path: /var/www/html/index.html
    content: |
      <h1>Welcome to StackSimplify - APP-1</h1>
  - owner: root:root 
    path: /var/www/html/app1/index.html
    content: |
      <!DOCTYPE html> <html> <body style="background-color:rgb(250, 210, 210);"> <h1>Welcome to Stack Simplify - APP-1</h1> <p>Terraform Demo</p> <p>Application Version: V1</p> </body></html>      
runcmd:
  - sudo systemctl start httpd  
  - sudo systemctl enable httpd
  - sudo systemctl stop firewalld
  - sudo mkdir /var/www/html/app1 
  - [sudo, curl, -H, "Metadata:true", --noproxy, "*", "http://169.254.169.254/metadata/instance?api-version=2020-09-01", -o, /var/www/html/app1/metadata.html]

-----------------------------------------------------------------------------------------------------------------------
#Explanation: - 

The provided code is a Cloud-Config script, commonly used in cloud-init setups to configure virtual machines during boot. Letâ€™s break down the script step by step.

### What is Cloud-Config?

- Cloud-Config is a YAML-based configuration file used with cloud-init, a widely used tool for automating the initialization of cloud instances.

- It can handle tasks like package installation, file creation, and service management at instance startup.

### Code Breakdown

#### 1. #cloud-config

- Declares the file as a cloud-init configuration file.
- Ensures the cloud-init tool interprets the file correctly.

#### 2. package_upgrade: false

package_upgrade: false

- Disables automatic upgrade of installed packages during instance initialization.
- Helps avoid potential issues or delays caused by package upgrades at boot.

#### 3. packages

yaml
packages:
  - httpd

- Specifies a list of packages to be installed using the system's package manager.

- Here:
  - httpd is being installed, which is the Apache HTTP Server for serving web content.

#### 4. write_files

yaml
write_files:
  - owner: root:root 
    path: /var/www/html/index.html
    content: |
      <h1>Welcome to StackSimplify - APP-1</h1>
  - owner: root:root 
    path: /var/www/html/app1/index.html
    content: |
      <!DOCTYPE html> <html> <body style="background-color:rgb(250, 210, 210);"> <h1>Welcome to Stack Simplify - APP-1</h1> <p>Terraform Demo</p> <p>Application Version: V1</p> </body></html>

- Purpose: Creates or modifies files on the instance.

- Attributes:

  - owner: Specifies ownership of the file. Here, the files are owned by the root user and group (root:root).
  - path: Specifies the file path where the content will be written.
  - content: Defines the content to write into the file.

Files Created:

1. /var/www/html/index.html:

   - Contains a simple HTML welcome message.
   - This serves as the default web page for the Apache HTTP Server.

   Content:
   html
   <h1>Welcome to StackSimplify - APP-1</h1>
   
2. /var/www/html/app1/index.html:

   - Contains a more detailed web page with styled HTML and an application version.
   - This page simulates a demo application for Terraform.

   Content:
   html
   <!DOCTYPE html> 
   <html> 
     <body style="background-color:rgb(250, 210, 210);"> 
       <h1>Welcome to Stack Simplify - APP-1</h1> 
       <p>Terraform Demo</p> 
       <p>Application Version: V1</p> 
     </body>
   </html>
   
#### 5. runcmd

yaml
runcmd:
  - sudo systemctl start httpd  
  - sudo systemctl enable httpd
  - sudo systemctl stop firewalld
  - sudo mkdir /var/www/html/app1 
  - [sudo, curl, -H, "Metadata:true", --noproxy, "*", "http://169.254.169.254/metadata/instance?api-version=2020-09-01", -o, /var/www/html/app1/metadata.html]

- Executes shell commands during instance boot.

- Commands are executed sequentially.

Commands:

1. sudo systemctl start httpd:

   - Starts the Apache HTTP Server service.

2. sudo systemctl enable httpd:

   - Configures the Apache service to start automatically on boot.

3. sudo systemctl stop firewalls:

   - Stops the firewall service to allow unrestricted access to the server.
   - Note: Disabling the firewall is risky and should only be done in controlled environments.

4. sudo mkdir /var/www/html/app1:

   - Creates a directory /var/www/html/app1 for hosting additional content.

5. curl Command:

   - Fetches instance metadata from the Azure Instance Metadata Service (IMDS).
   - Metadata includes instance-specific details like VM name, size, and region.
   - Writes the metadata to `/var/www/html/app1/metadata.html`.

### Purpose and Use Case

This script is used to:

1. Set Up a Web Server:

   - Installs and starts the Apache HTTP Server (httpd).
   - Creates and serves HTML content.

2. Host a Demo Application:

   - Customizes the content for the application (app1`) with application versioning and a unique design.

3. Fetch and Display Metadata:

   - Retrieves VM metadata for debugging or demonstration purposes.


### How It Fits in Terraform

- In a Terraform deployment, this script would typically be embedded as part of a user data configuration for an Azure VM or any other cloud instance.
- Example:

resource "azurerm_linux_virtual_machine" "example" {
  name                  = "example-vm"
  resource_group_name   = azurerm_resource_group.myrg.name
  location              = azurerm_resource_group.myrg.location
  size                  = "Standard_B1s"
  admin_username        = "azureuser"
  admin_ssh_key {
    username   = "azureuser"
    public_key = file("~/.ssh/id_rsa.pub")
  }
  custom_data = filebase64("cloud-config.yaml") # Pass the script
}



### Key Notes

1. Flexibility:
   - The script can be customized for different configurations, such as adding more packages or creating additional files.

2. Security:
   - Disabling the firewall may expose the instance to unnecessary risks. Use this only in secure environments.

3. Metadata Fetching:
   - Fetching and storing metadata can help in debugging and monitoring, especially in environments like Azure.

This script is a robust example of initializing a VM with a web server and custom configurations in an automated way.
